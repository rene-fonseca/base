trigger: none
#trigger:
#  batch: true
#  branches:
#    include:
#    - master

#pr:
#- master

schedules:
- cron: "0 0 * * *"
  displayName: Daily build
  branches:
    include:
    - master

variables:
  CLICOLOR_FORCE: 1 # used by Base tools

resources:
  containers:
  - container: ubuntu19_04
    image: renefonseca/base-ubuntu:19.04
  - container: ubuntu19_10
    image: renefonseca/base-ubuntu:19.10
  - container: debian
    image: renefonseca/base-debian:latest
  - container: opensuse
    image: renefonseca/base-opensuse:latest
  - container: amazonlinux
    image: renefonseca/base-amazonlinux:latest
  - container: gcc
    image: renefonseca/base-gcc:latest
  - container: emcc
    image: renefonseca/base-emcc:latest
  - container: centos
    image: renefonseca/base-centos8:latest
  - container: freebsd12
    image: renefonseca/base-freebsd12:latest
  - container: raspberrypi4
    image: renefonseca/base-raspberrypi4-64-debian:latest

jobs:
- job: centos8
  condition: eq(1, 2)
  pool:
    vmImage: 'ubuntu-18.04'
  container: centos
  steps:
  - script: $(Build.SourcesDirectory)/ci/config.sh
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: $(Build.SourcesDirectory)/ci/build.sh
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: $(Build.SourcesDirectory)/ci/test.sh
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      workingDirectory: $(Build.BinariesDirectory)

- job: debian_arm64
  condition: eq(1, 2)
  pool:
    vmImage: 'ubuntu-18.04'
  container: raspberrypi4
  steps:
  - script: $(Build.SourcesDirectory)/ci/config.sh
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: $(Build.SourcesDirectory)/ci/build.sh
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: $(Build.SourcesDirectory)/ci/test.sh
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      workingDirectory: $(Build.BinariesDirectory)

- job: ubuntu19_04_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: ubuntu19_04
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)
  
  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-ubuntu19_04-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: ubuntu19_10_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: ubuntu19_10
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-ubuntu19_10-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: debian_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: debian
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)
  
  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-debian-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: ubuntu_clang_x64
  pool:
    vmImage: 'ubuntu-18.04'
  steps:

  # not as nice as container
  - script: |
      sudo apt-get update -y
      sudo apt-get install -y clang-9
    displayName: 'Install clang'

  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install \
      -DCMAKE_CXX_COMPILER=clang++-9 -DCMAKE_C_COMPILER=clang-9
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-ubuntu-clang-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: opensuse_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: opensuse
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-opensuse-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: amazonlinux_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: amazonlinux
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)
  
  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-amazonlinux-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: gcc9
  pool:
    vmImage: 'ubuntu-18.04'
  container: gcc
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      ./testsuite/unittesting --junit junit.xml
      ctest -T Test
    displayName: 'Run tests'
    continueOnError: true
    workingDirectory: $(Build.BinariesDirectory)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
      testRunTitle: 'Unittest results'
      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
      testRunTitle: 'Test results for CTest'
      searchFolder: '$(Build.BinariesDirectory)'

- job: freebsd_x64
  pool:
    vmImage: 'ubuntu-18.04'
  container: freebsd12
  steps:
  - script: cmake $(Build.SourcesDirectory) -DCOLOR=1 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install -DCMAKE_CXX_COMPILER=/freebsd/bin/x86_64-pc-freebsd12-g++ -DCMAKE_C_COMPILER=/freebsd/bin/x86_64-pc-freebsd12-gcc
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

#  - script: |
#      ./testsuite/unittesting --junit junit.xml
#      ctest -T Test
#    displayName: 'Run tests'
#    continueOnError: true
#    workingDirectory: $(Build.BinariesDirectory)

#  - task: PublishTestResults@2
#    inputs:
#      testResultsFormat: 'JUnit'
#      testResultsFiles: '**/junit.xml'
#      testRunTitle: 'Unittest results'
#      searchFolder: '$(Build.BinariesDirectory)'

#  - task: PublishTestResults@2
#    inputs:
#      testResultsFormat: 'cTest'
#      testResultsFiles: '**/Test.xml'
#      testRunTitle: 'Test results for CTest'
#      searchFolder: '$(Build.BinariesDirectory)'

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: 'base-freebsd12-x64'
      targetPath: 'artifacts'
      path: $(Build.BinariesDirectory)/install

- job: emcc
  pool:
    vmImage: 'ubuntu-18.04'
  container: emcc
  steps:
  - script: |
      /root/emsdk/emsdk activate latest
      source /root/emsdk/emsdk_env.sh
      echo node --experimental-wasm-threads --experimental-wasm-bulk-memory > run.sh
      chmod +x run.sh
      emconfigure cmake $(Build.SourcesDirectory) -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install -DCTEST_INTERPRETER=$(Build.SourcesDirectory)/run.sh
    displayName: 'Config'
    workingDirectory: $(Build.BinariesDirectory)

  - script: |
      source /root/emsdk/emsdk_env.sh
      emmake cmake --build . --config Debug --target install -- -j 4
    displayName: 'Build'
    workingDirectory: $(Build.BinariesDirectory)

#  - script: |
#      source /root/emsdk/emsdk_env.sh
#      ./run.sh ./testsuite/unittesting.js --junit junit.xml
#      ctest -T Test
#    displayName: 'Run tests'
#    continueOnError: true
#    workingDirectory: $(Build.BinariesDirectory)

#  - task: PublishTestResults@2
#    inputs:
#      testResultsFormat: 'JUnit'
#      testResultsFiles: '**/junit.xml'
#      testRunTitle: 'Unittest results'
#      searchFolder: '$(Build.BinariesDirectory)'

#  - task: PublishTestResults@2
#    inputs:
#      testResultsFormat: 'cTest'
#      testResultsFiles: '**/Test.xml'
#      testRunTitle: 'Test results for CTest'
#      searchFolder: '$(Build.BinariesDirectory)'
