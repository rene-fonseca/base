dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(ellert,0.91)

AC_LIBTOOL_WIN32_DLL()
AM_PROG_LIBTOOL()

AC_CANONICAL_HOST()
dnl The following variables have been set: $host, $host_cpu, $host_vendor, and $host_os

base_system=unix
base_thread=posix
base_define_xopen=no

case "$host_os" in
cygwin)
  base_system=win32
  CXXFLAGS="${CXXFLAGS}${CXXFLAGS:+ }"'-mno-cygwin -mthreads'
  LIBS="${LIBS}${LIBS:+ }"'-lws2_32'
;;
linux-gnu)
  AC_DEFINE(_GNU_SOURCE, 1, Specifies that the UNIX 98 functionality and GNU extensions are utilized)
;;
irix*)
  AC_DEFINE(_SGI_SOURCE, 1, Specifies that the UNIX 98 functionality and SGI extensions are utilized)
;;
solaris*)
  AC_DEFINE(__solaris__, 1, Specifies that the Solaris specific functions are available)
  AC_DEFINE(__EXTENSIONS__, 1, Specifies that the Solaris extensions are utilized)
  base_define_xopen=yes
;;
*)
  base_define_xopen=yes
;;
esac

if test $base_define_xopen = yes; then
  AC_DEFINE(_XOPEN_SOURCE, 500, Specifies that the UNIX 98 functionality is utilized)
fi



case "$base_system" in
unix)
  AC_DEFINE(_REENTRANT, 1, Select additionally reentrant object)
;;
win32)
  base_thread=win32
  AC_DEFINE(__win32__, 1, Specifies that the WIN32 API is available and should be used)
;;
esac



dnl Checks for programs.
AC_PREREQ(2.13)
#AC_PROG_CC
#AC_PROG_CXX
AC_CHECK_PROG(CC, cc gcc, gcc)
AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, gcc)



dnl Manual configuration

base_explicit_trace=no
AC_ARG_ENABLE(
  trace,[
  --enable-trace=[yes|no]
      Specifies that selected functions should dump tracing information to
      standard output. This feature is disabled by default.],
  if test "$enableval" = no; then
    base_explicit_trace=no
  elif test "$enableval" = yes; then
    base_explicit_trace=yes
  else
    AC_MSG_ERROR(The trace flag must be either 'yes' or 'no'.)
  fi
)
if test "$base_explicit_trace" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__TRACE, 1, Specifies that selected functions should dump tracing information to stderr.)
fi

base_explicit_namespace=yes
AC_ARG_ENABLE(
  namespace,[
  --enable-namespace=[yes|no]
      Specifies that the symbols of this framework should by placed in the
      namespace 'base'. Disabling this feature will put the symbols into the
      global namespace. This feature is enabled by default.],
  if test "$enableval" = no; then
    base_explicit_namespace=no
  elif test "$enableval" = yes; then
    base_explicit_namespace=yes
  else
    AC_MSG_ERROR(The namespace flag must be either 'yes' or 'no'.)
  fi
)
if test "$base_explicit_namespace" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__NAMESPACE, 1, Specifies that the symbols of this framework should be placed in the namespace 'base')
fi

base_explicit_inet_ipv6=auto
AC_ARG_ENABLE(
  ipv6,[
  --enable-ipv6=[auto|yes|no]
      Specifies whether the framework should use the interface extensions for
      IP version 6 or not. If the protocol version is not specified then IPv6
      will be used if available. Automatic detection will fail if using a
      cross compiler.],
  if test $enableval = auto; then
    base_explicit_inet_ipv6=auto
  elif test $enableval = no; then
    base_explicit_inet_ipv6=no
  elif test $enableval = yes; then
    base_explicit_inet_ipv6=yes
  else
    AC_MSG_ERROR(IP version must be either 'auto', 'yes', or 'no'.)
  fi
)

base_explicit_big_endian=auto
AC_ARG_ENABLE(
  big-endian,[
  --enable-big-endian=[auto|yes|no]
      Specifies that byte order of the target architecture is big endian. The
      byte order will be detected by default. The byte order detection will
      fail if the compiler is a cross compiler.],
  if test $enableval = auto; then
    base_explicit_big_endian=auto
  elif test $enableval = yes; then
    base_explicit_big_endian=yes
  elif test $enableval = no; then
    base_explicit_big_endian=no
  else
    AC_MSG_ERROR(The byte order must be either 'auto', 'yes', or 'no'.)
  fi
)



dnl Setup variables



dnl Checks for libraries.


dnl AC_BASE_MKYESNO(variable)
AC_DEFUN(AC_BASE_MKYESNO, [dnl
if test $? = 0; then $1=yes; else $1=no; fi dnl
])

dnl AC_BASE_YES(variable, yes action)
AC_DEFUN(AC_BASE_YES, [dnl
if test "[$]$1" = yes; then
  $2
fi
])

dnl AC_BASE_NO(variable, no action)
AC_DEFUN(AC_BASE_NO, [dnl
if test "[$]$1" = no; then
  $2
fi
])

dnl AC_BASE_YESNO(variable, yes action, no action)
AC_DEFUN(AC_BASE_YESNO, [dnl
if test "[$]$1" = yes; then
  $2
else
  $3
fi
])

dnl AC_BASE_NOT(dest variable, source variable)
AC_DEFUN(AC_BASE_NOT, [dnl
if test "[$]$2" = no; then $1=yes; else $1=no; fi dnl
])

dnl AC_BASE_MSG(message)
AC_DEFUN(AC_BASE_MSG, [dnl
echo $ac_n "$1$ac_c" 1>&AC_FD_MSG dnl
])

dnl AC_BASE_MSGLN(message)
AC_DEFUN(AC_BASE_MSGLN, [dnl
echo "$1" 1>&AC_FD_MSG dnl
])

dnl AC_BASE_CHECK(check message, action, result variable[, extra variable])
AC_DEFUN(AC_BASE_CHECK, [dnl
AC_BASE_MSG([$1... ])
$2
ifelse([$4], , AC_BASE_MSGLN([$]$3), [dnl
dnl if test "[$]$3" = yes; then
  if test -n "[$]$4"; then
    AC_BASE_MSGLN([[$]$3 ([$]$4)])
  else
    AC_BASE_MSGLN([$]$3)
  fi
dnl else
dnl   AC_BASE_MSGLN(no)
dnl fi
])dnl
])

dnl AC_BASE_CACHE(variable list, action that sets all the specified variables)
AC_DEFUN(AC_BASE_CACHE, [dnl
ac_temp_cached=yes
for ac_temp_var in $1; do
  if eval "test \"`echo '$''{'$ac_temp_var'+set}'`\" != set"; then
    ac_temp_cached=no
    break
  fi
done
if test "$ac_temp_cached" = yes; then
  AC_BASE_MSG([(cached) ])
else
  $2
fi
])

dnl AC_BASE_ATTEMPT(result variable, value variable, value list, action setting result)
AC_DEFUN(AC_BASE_ATTEMPT, [dnl
for $2 in $3; do
  $4
  test "[$]$1" = yes && break
done
test "[$]$1" != yes && $2=
])



base_src_temp="config/temp"
base_app_temp="config/temp${ac_exeext}"
base_cleanup="rm -f config/temp*"
base_run="./$base_app_temp"

dnl C specific
base_c_ext=c
base_c_src="$base_src_temp.$base_c_ext"
base_c_preprocess='$CPP $CPPFLAGS'
base_c_compile='${CC} -c $CFLAGS $CPPFLAGS $base_c_src $base_c_opts'
base_c_link='${CC} -o $base_app_temp $CFLAGS $CPPFLAGS $LDFLAGS $base_c_src $LIBS $base_c_opts'

dnl C++ specific
base_cxx_ext=cpp
base_cxx_src="$base_src_temp.$base_cxx_ext"
base_cxx_preprocess='${CXXCPP} $CPPFLAGS'
base_cxx_compile='${CXX} -c $CXXFLAGS $CPPFLAGS $base_cxx_src $base_cxx_opts'
base_cxx_link='${CXX} -o $base_app_temp $CXXFLAGS $CPPFLAGS $LDFLAGS $base_cxx_src $LIBS $base_cxx_opts'



dnl AC_BASE_TRY_EXEC(variable)
AC_DEFUN(AC_BASE_TRY_EXEC, [ { (eval [$]$1) 1>&AC_FD_CC 2>&AC_FD_CC; } ])

dnl AC_BASE_TRY_CMD(command)
AC_DEFUN(AC_BASE_TRY_CMD, [ { ac_temp='$1'; AC_BASE_TRY_EXEC(ac_temp); } ])

dnl AC_BASE_TRY_C_COMPILE(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_C_COMPILE, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_c_src}
base_c_opts=[$3]
AC_BASE_TRY_EXEC(base_c_compile)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_COMPILE(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_CXX_COMPILE, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_cxx_src}
base_cxx_opts=[$3]
AC_BASE_TRY_EXEC(base_cxx_compile)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_C_LINK(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_C_LINK, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_c_src}
base_c_opts=[$3]
AC_BASE_TRY_EXEC(base_c_link)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_LINK(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_CXX_LINK, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_cxx_src}
base_cxx_opts=[$3]
AC_BASE_TRY_EXEC(base_cxx_link)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_C_RUN(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_C_RUN, [dnl
[$1]=no
AC_BASE_YES(
  base_cv_c_cross,
  ifelse([$4], , AC_MSG_ERROR(C compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_c_src}
base_c_opts=[$3]
if AC_BASE_TRY_EXEC(base_c_link); then
  if test -s ${base_app_temp} && AC_BASE_TRY_EXEC(base_run); then
    [$1]=yes
  fi
fi
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_RUN(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_CXX_RUN, [dnl
[$1]=no
AC_BASE_YES(
  base_cv_cxx_cross,
  ifelse([$4], , AC_MSG_ERROR(C compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
cp [$2] ${base_cxx_src}
base_cxx_opts=[$3]
if AC_BASE_TRY_EXEC(base_cxx_link); then
  if test -s ${base_app_temp} && AC_BASE_TRY_EXEC(base_run); then
    [$1]=yes
  fi
fi
${base_cleanup}
])

dnl AC_BASE_ADDLIB(library list)
AC_DEFUN(AC_BASE_ADDLIB, [dnl
for ac_temp in [$1]; do
  LIBS="${LIBS}${LIBS:+ }${ac_temp}"
done
])


AC_BASE_CHECK(
  checking whether C compiler (`echo $CC $CFLAGS $CPPFLAGS $LIBS`) works,
  AC_BASE_TRY_C_LINK(base_c_compiler_works, config/cross.c),
  base_c_compiler_works)

AC_BASE_CHECK(
  checking whether C compiler (`echo $CC $CFLAGS $CPPFLAGS $LIBS`) is a cross compiler,
  AC_BASE_TRY_C_RUN(base_c_not_cross, config/cross.c,)
  AC_BASE_NOT(base_cv_c_cross, base_c_not_cross),
  base_cv_c_cross)

AC_BASE_CHECK(
  checking whether C++ compiler (`echo $CXX $CXXFLAGS $CPPFLAGS $LIBS`) works,
  AC_BASE_TRY_CXX_LINK(base_cxx_compiler_works, config/cross++.cpp),
  base_cxx_compiler_works)

AC_BASE_CHECK(
  checking whether C++ compiler (`echo $CXX $CXXFLAGS $CPPFLAGS $LIBS`) is a cross compiler,
  AC_BASE_CACHE(
    base_cv_cxx_cross base_cv_cxx_libs,
    AC_BASE_ATTEMPT(
      base_cxx_not_cross,
      base_cv_cxx_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_RUN(base_cxx_not_cross, config/cross++.cpp, $base_cv_cxx_libs,)
    )dnl
    AC_BASE_NOT(base_cv_cxx_cross, base_cxx_not_cross)dnl
  ),
  base_cv_cxx_cross,
  base_cv_cxx_libs)
AC_BASE_ADDLIB($base_cv_cxx_libs)

AC_BASE_CHECK(
  checking whether Standard Template Library is working,
  AC_BASE_CACHE(
    base_cv_stl_available base_cv_stl_libs,
    AC_BASE_ATTEMPT(
      base_cv_stl_available,
      base_cv_stl_libs,
      "" "-lpthread",
      AC_BASE_TRY_CXX_RUN(base_cv_stl_available, config/stdc++.cpp, $base_cv_stl_libs)dnl
    )dnl
  ),
  base_cv_stl_available,
  base_cv_stl_libs)
AC_BASE_ADDLIB($base_cv_stl_libs)



dnl Checks for header files.



dnl Checks for typedefs, structures, and compiler characteristics.

AC_BASE_CHECK(
  checking whether const is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_const,
    AC_BASE_TRY_CXX_COMPILE(base_cv_const, config/const.cpp, )
  ),
  base_cv_const)
if test "$base_cv_const" != yes; then
  AC_MSG_ERROR(The compiler does not support the const keyword)
fi

AC_BASE_CHECK(
  checking whether inline is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_inline,
    AC_BASE_TRY_CXX_COMPILE(base_cv_inline, config/inline.c, )
  ),
  base_cv_inline)
if test "$base_cv_inline" != yes; then
  AC_MSG_ERROR(The compiler does not support the inline keyword)
fi

AC_BASE_CHECK(
  checking whether static const with initializer is supported,
  AC_BASE_CACHE(
    base_cv_static_const,
    AC_BASE_TRY_CXX_COMPILE(base_cv_static_const, config/static_const.c, )
  ),
  base_cv_static_const)
if test "$base_cv_static_const" != yes; then
  AC_MSG_ERROR(The compiler does not support static const with initializer)
fi

AC_BASE_CHECK(
  checking whether anonymous struct is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_anonymous_struct,
    AC_BASE_TRY_CXX_COMPILE(base_cv_anonymous_struct, config/anonymous_struct.c, )
  ),
  base_cv_anonymous_struct)
if test "$base_cv_anonymous_struct" != yes; then
  AC_MSG_ERROR(The compiler does not support anonymous struct)
fi

if test $base_explicit_big_endian = auto; then
  AC_BASE_CHECK(
    checking whether byte order of architecture is big endian,
    AC_BASE_CACHE(
      base_cv_big_endian,
      AC_BASE_TRY_CXX_RUN(base_cv_big_endian, config/byteorder.c, , AC_MSG_ERROR(Autodetection of byte order does not work with cross compiler.))
    ),
    base_cv_big_endian)
  base_explicit_big_endian=$base_cv_big_endian
fi
AC_BASE_YES(
  base_explicit_big_endian,
  AC_DEFINE(_DK_SDU_MIP__BASE__BIG_ENDIAN, 1, Specifies that the byte order of the architecture is big endian)
)

AC_BASE_CHECK(
  checking whether the type socklen_t is available,
  AC_BASE_CACHE(
    base_cv_type_socklen_t,
    AC_BASE_TRY_CXX_LINK(base_cv_type_socklen_t, config/socklen_t.c)
  ),
  base_cv_type_socklen_t)
if test "$base_cv_type_socklen_t" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__SOCKLEN_T, 1, Specifies that the type socklen_t is available)
fi



dnl Checks for library functions.

if test $base_explicit_inet_ipv6 = auto; then
  AC_BASE_CHECK(
    checking whether IPv6 is supported by the operating system,
    AC_BASE_CACHE(
      base_cv_inet_ipv6 base_cv_inet_ipv6_libs,
      AC_BASE_ATTEMPT(
        base_cv_inet_ipv6,
        base_cv_inet_ipv6_libs,
        "" -lsocket "-lsocket -lnsl",
        AC_BASE_TRY_CXX_RUN(base_cv_inet_ipv6, config/ipv6.c, $base_cv_inet_ipv6_libs, AC_MSG_ERROR(Autodetection of IPv6 support does not work with cross compiler.))dnl
      )dnl
    ),
    base_cv_inet_ipv6,
    base_cv_inet_ipv6_libs)
  base_explicit_ipv6=$base_cv_inet_ipv6
fi
AC_BASE_YES(
  base_explicit_inet_ipv6,
  AC_DEFINE(_DK_SDU_MIP__BASE__INET_IPV6, 1, Specifies that the interface extensions for IP version 6 are present)
)
AC_BASE_ADDLIB($base_cv_inet_ipv6_libs)



dnl Check POSIX thread support
if test "$base_thread" = posix; then

AC_BASE_CHECK(
  checking whether posix thread is supported,
  AC_BASE_CACHE(
    base_cv_pthread base_cv_pthread_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread,
      base_cv_pthread_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread, config/pthread.c, $base_cv_pthread_libs)dnl
    )dnl
  ),
  base_cv_pthread,
  base_cv_pthread_libs)
if test "$base_cv_pthread" != yes; then
  AC_MSG_ERROR(The compiler does not support POSIX threads)
fi
AC_BASE_ADDLIB($base_cv_pthread_libs)

AC_BASE_CHECK(
  checking whether pthread_yield is provided by the POSIX thread library,
  AC_BASE_CACHE(
    base_cv_pthread_yield base_cv_pthread_yield_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_yield,
      base_cv_pthread_yield_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_yield, config/pthread_yield.c, $base_cv_pthread_yield_libs)dnl
    )dnl
  ),
  base_cv_pthread_yield,
  base_cv_pthread_yield_libs)
if test "$base_cv_pthread_yield" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__PTHREAD_YIELD, 1, Specifies that pthread_yield is provided by the POSIX threads library)
fi
AC_BASE_ADDLIB($base_cv_pthread_yield_libs)

AC_BASE_CHECK(
  checking whether Posix semaphore is supported,
  AC_BASE_CACHE(
    base_cv_pthread_semaphore base_cv_pthread_semaphore_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_semaphore,
      base_cv_pthread_semaphore_libs,
      "" -lpthread -lrt,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_semaphore, config/pthread_semaphore.c, $base_cv_pthread_semaphore_libs)dnl
    )dnl
  ),
  base_cv_pthread_semaphore,
  base_cv_pthread_semaphore_libs)
if test "$base_cv_pthread_semaphore" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__PTHREAD_SEMAPHORE, 1, Specifies that Posix semaphore is supported)
fi
AC_BASE_ADDLIB($base_cv_pthread_semaphore_libs)

AC_BASE_CHECK(
  checking whether Posix read-write lock is supported,
  AC_BASE_CACHE(
    base_cv_pthread_rwlock base_cv_pthread_rwlock_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_rwlock,
      base_cv_pthread_rwlock_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_rwlock, config/pthread_rwlock.c, $base_cv_pthread_rwlock_libs)dnl
    )dnl
  ),
  base_cv_pthread_rwlock,
  base_cv_pthread_rwlock_libs)
if test "$base_cv_pthread_rwlock" = yes; then
  AC_DEFINE(_DK_SDU_MIP__BASE__PTHREAD_RWLOCK, 1, Specifies that Posix read-write lock is supported)
fi
AC_BASE_ADDLIB($base_cv_pthread_rwlock_libs)

fi dnl POSIX thread support

#AC_CHECK_FUNCS(memchr memcmp memmove)



CPPFLAGS="${CPPFLAGS}${CPPFLAGS:+ }"'-I${top_srcdir}/ellert'



AC_OUTPUT(Makefile ellert/Makefile ellert/docs/Makefile ellert/docs/en/Makefile ellert/base/Makefile ellert/vehicle/Makefile ellert/base/concurrency/Makefile ellert/base/mathematics/Makefile ellert/io/Makefile ellert/base/io/Makefile ellert/base/string/Makefile ellert/base/mem/Makefile ellert/base/net/Makefile ellert/control/Makefile ellert/base/collection/Makefile ellert/test/Makefile )
