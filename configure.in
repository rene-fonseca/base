dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(ellert,0.55)

AC_DEFINE(_REENTRANT)
AC_DEFINE(_GNU_SOURCE)



dnl Checks for programs.
AC_PREREQ(2.13)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB



dnl Manual configuration

base_explicit_namespaces=yes
AC_ARG_ENABLE(
  namespaces,[
  --enable-namespaces=[yes|no]

      Specifies that the symbols of this framework should by placed in the
      namespace 'base'. Disabling this feature will put the symbols into the
      global namespace. This feature is enabled by default.],
  if test $enableval = no; then
    base_explicit_namespaces=no
  elif test $enableval = yes; then
    base_explicit_namespaces=yes
  else
    AC_MSG_ERROR(The namespaces must be either 'yes' or 'no'.)
  fi
)
if test $base_explicit_namespaces = yes; then
  AC_DEFINE(BASE_USE_NAMESPACE, 1, Specifies that the symbols of this framework should be placed in the namespace 'base')
fi

base_explicit_ipv6=auto
AC_ARG_ENABLE(
  ipv6,[
  --enable-ipv6=[auto|yes|no]

      Specifies whether the framework should use the interface extensions for
      IP version 6 or not. If the protocol version is not specified then IPv6
      will be used if available. Automatic detection will fail if using a
      cross compiler.],
  if test $enableval = auto; then
    base_explicit_ipv6=auto
  elif test $enableval = no; then
    base_explicit_ipv6=no
  elif test $enableval = yes; then
    base_explicit_ipv6=yes
  else
    AC_MSG_ERROR(IP version must be either 'auto', 'yes', or 'no'.)
  fi
)

base_explicit_big_endian=auto
AC_ARG_ENABLE(
  big-endian,[
  --enable-big-endian=[auto|yes|no]

      Specifies that byte order of the target architecture is big endian. The
      byte order will be detected by default. The byte order detection will
      fail if the compiler is a cross compiler.],
  if test $enableval = auto; then
    base_explicit_big_endian=auto
  elif test $enableval = yes; then
    base_explicit_big_endian=yes
  elif test $enableval = no; then
    base_explicit_big_endian=no
  else
    AC_MSG_ERROR(The byte order must be either 'auto', 'yes', or 'no'.)
  fi
)



dnl Setup variables

TESTOBJ="config/conftest.o"
TESTEXE="config/conftest"
REDIRDEV=/dev/null
dnl C compiler - CC
dnl C++ compiler - CPP


base_c_is_cross_compiler=no
base_cxx_is_cross_compiler=no


dnl Checks for libraries.


dnl AC_BASE_MKYESNO(variable)
AC_DEFUN(AC_BASE_MKYESNO, [if test $? = 0; then $1=yes; else $1=no; fi])


dnl AC_BASE_YES(variable, yes action)
AC_DEFUN(AC_BASE_YES, [
if test $$1 = yes; then
  $2
  true;
fi]
)


dnl AC_BASE_NO(variable, no action)
AC_DEFUN(AC_BASE_NO, [
if test $$1 = no; then
  $2
  true;
fi]
)


dnl AC_BASE_YESNO(variable, yes action, no action)
AC_DEFUN(AC_BASE_YESNO, [
AC_BASE_YES($1, $2)
AC_BASE_NO($1, $3)]
)


dnl AC_BASE_NOT(dest variable, source variable)
AC_DEFUN(AC_BASE_NOT, [
if test $$2 = yes; then
  $1=no;
else
  $1=yes;
fi]
)


dnl AC_CAN_COMPILE(variable, compiler, source file)
AC_DEFUN(AC_CAN_COMPILE, [
if test ! -r $3; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
rm -rf $TESTOBJ
$2 -c $3 -o $TESTOBJ > $REDIRDEV 2>&1
AC_BASE_MKYESNO($1)
rm -rf $TESTOBJ]
)


dnl AC_CAN_LINK(variable, compiler, source file)
AC_DEFUN(AC_CAN_LINK, [
if test ! -r $3; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
rm -rf $TESTEXE
$2 $3 -o $TESTEXE > $REDIRDEV 2>&1
AC_BASE_MKYESNO($1)
rm -rf $TESTEXE]
)


dnl AC_BASE_CHECK(variable, message, action)
AC_DEFUN(AC_BASE_CHECK, [
echo $ac_n $2"... $ac_c" 1>&6
$3
echo $$1 1>&6]
)


dnl AC_BASE_CHECK_CACHED(variable, message, action)
AC_DEFUN(AC_BASE_CHECK_CACHED, [
AC_BASE_CHECK(
  $1,
  $2,
  AC_CACHE_VAL($1, $3)
)]
)


dnl AC_CAN_RUN(variable, compiler, source file, cross compiler message)
AC_DEFUN(AC_CAN_RUN, [
AC_BASE_YES(base_cxx_is_cross_compiler, AC_MSG_ERROR($4))
if test ! -r $3; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
rm -rf $TESTEXE
$2 $3 -o $TESTEXE > $REDIRDEV 2>&1
if test $? = 0; then
  $TESTEXE > $REDIRDEV 2>&1
  AC_BASE_MKYESNO($1)
else
  AC_MSG_ERROR(Unable to compile and link test application.)
fi
rm -rf $TESTEXE]
)



AC_BASE_CHECK(
  base_c_compiler_works,
  "checking whether C compiler ($CC) works",
  AC_CAN_LINK(base_c_compiler_works, $CC, config/cross.c)
)

AC_BASE_CHECK(
  base_c_is_cross_compiler,
  "checking whether C compiler ($CC) is a cross compiler",
  AC_CAN_RUN(base_c_is_not_cross_compiler, $CC, config/cross.c, "Compiler is cross compiler")
  AC_BASE_NOT(base_c_is_cross_compiler, base_c_is_not_cross_compiler)
)

AC_BASE_CHECK(
  base_cxx_compiler_works,
  "checking whether C++ compiler ($CXX) works",
  AC_CAN_LINK(base_cxx_compiler_works, $CXX, config/cross++.cpp)
)

AC_BASE_CHECK(
  base_cxx_is_cross_compiler,
  "checking whether C++ compiler ($CXX) is a cross compiler",
  AC_CAN_RUN(base_cxx_is_not_cross_compiler, $CXX, config/cross.c, "Compiler is cross compiler")
  AC_BASE_NOT(base_cxx_is_cross_compiler, base_cxx_is_not_cross_compiler)
)



AC_BASE_CHECK_CACHED(
  base_cv_stl_available,
  "checking whether Standard Template Library is working",
  AC_CAN_RUN(base_stl_without_pthread, $CXX, config/stdc++.cpp, "Compiler is cross compiler")
  AC_BASE_YESNO(
    base_stl_without_pthread,
    base_cv_stl_available=yes,
    AC_CAN_RUN(base_stl_with_pthread, $CXX -lpthread, config/stdc++.cpp, "Compiler is cross compiler")
    base_cv_stl_available=$base_stl_with_pthread
  )
)


LIBS="$LIBS -lpthread"


dnl Checks for header files.

CPPFLAGS="$CPPFLAGS -I`pwd`/ellert"



dnl Checks for typedefs, structures, and compiler characteristics.

if test $base_explicit_big_endian = auto; then
  AC_BASE_CHECK_CACHED(
    base_cv_big_endian,
    "checking whether byte order of architecture is big endian",
    AC_CAN_RUN(base_cv_big_endian, $CC, config/byteorder.c, "Autodetection of byte order does not work with cross compiler.")
  )
  base_explicit_big_endian=$base_cv_big_endian
fi
AC_BASE_YES(
  base_explicit_big_endian,
  AC_DEFINE(HAVE_BIG_ENDIAN, 1, Specifies that the byte order of the architecture is big endian)
)


AC_BASE_CHECK_CACHED(
  base_cv_inet_ipv6,
  "checking whether IPv6 is supported by the operating system",
  AC_CAN_LINK(base_cv_inet_ipv6, $CC, config/ipv6.c)
)
AC_BASE_YES(
  base_cv_inet_ipv6,
  AC_DEFINE(HAVE_INET_IPV6, 1, Specifies that the interface extensions for IP version 6 are present)
)

AC_BASE_CHECK_CACHED(
  base_cv_type_socklen_t,
  "checking whether the type socklen_t is available",
  AC_CAN_LINK(base_cv_type_socklen_t, $CC, config/socklen_t.c)
)
if test $base_cv_type_socklen_t = yes; then
  AC_DEFINE(HAVE_TYPE_SOCKLEN_T, 1, Specifies that the type socklen_t is available)
fi



dnl Checks for library functions.

AC_BASE_CHECK_CACHED(
  base_cv_pthread_yield,
  "checking whether pthread_yield is provided by the POSIX thread library",
  AC_CAN_LINK(base_cv_pthread_yield, $CC -pthread, config/pthread_yield.c)
)
if test $base_cv_pthread_yield = yes; then
  AC_DEFINE(HAVE_PTHREAD_YIELD, 1, Specifies that pthread_yield is provided by the POSIX threads library)
fi

AC_BASE_CHECK_CACHED(
  base_cv_pthread_semaphore,
  "checking whether Posix semaphore is supported",
  AC_CAN_LINK(base_cv_pthread_semaphore, $CC -pthread, config/pthread_semaphore.c)
)
if test $base_cv_pthread_semaphore = yes; then
  AC_DEFINE(HAVE_PTHREAD_SEMAPHORE, 1, Specifies that Posix semaphore is supported)
fi

AC_BASE_CHECK_CACHED(
  base_cv_pthread_rwlock,
  "checking whether Posix read-write lock is supported",
  AC_CAN_LINK(base_cv_pthread_rwlock, $CC -pthread, config/pthread_rwlock.c)
)
if test $base_cv_pthread_rwlock = yes; then
  AC_DEFINE(HAVE_PTHREAD_RWLOCK, 1, Specifies that Posix read-write lock is supported)
fi


AC_CHECK_FUNCS(memchr memcmp memmove)



AC_OUTPUT(Makefile ellert/Makefile ellert/docs/Makefile ellert/docs/en/Makefile ellert/base/Makefile ellert/vehicle/Makefile ellert/base/concurrency/Makefile ellert/base/mathematics/Makefile ellert/io/Makefile ellert/base/io/Makefile ellert/base/string/Makefile ellert/base/mem/Makefile ellert/base/net/Makefile ellert/control/Makefile ellert/base/collection/Makefile )
