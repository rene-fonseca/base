dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

AC_CANONICAL_SYSTEM()
AM_INIT_AUTOMAKE()

dnl AC_PROG_RANLIB()
dnl AC_PROG_CXX()

AC_LIBTOOL_WIN32_DLL()
AM_PROG_LIBTOOL()



ac_base_config=configuration.tmp
rm -f $ac_base_config

dnl AC_BASE_DEFINE(symbol name, value)
AC_DEFUN(AC_BASE_DEFINE, [dnl
ifelse([$2], , ac_base_temp="_DK_SDU_MIP__BASE__$1", ac_base_temp="_DK_SDU_MIP__BASE__$1 $2")
cat >> $ac_base_config << EOF
[#define] ${ac_base_temp}
EOF
])

dnl AC_BASE_DEFINE_FUNCTION(function name)
AC_DEFUN(AC_BASE_DEFINE_FUNCTION, [dnl
AC_BASE_DEFINE(["HAVE_`echo $1 | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ`"])
])



ac_base_flavour=unix
ac_base_platform=
ac_base_thread=

AC_ARG_ENABLE(
  flavour,[
  --enable-flavour=[unix|win32]
      This feature explicitly specifies the target flavour. This is
      only required if the particular platform supports more than one
      flavour. The default is 'unix'.],
  ac_base_flavour=$enableval
)
case "$ac_base_flavour" in
unix)
;;
win32)
;;
*)
  AC_MSG_ERROR(The flavour flag must be either 'unix' or 'win32'.)
;;
esac

case "$ac_base_flavour" in
unix)
  ac_base_thread=posix

  case "$host" in
  i[[3456]]86-pc-cygwin)
    ac_base_platform="i386-pc-cygwin.h"
  ;;
  i[[3456]]86-pc-linux*)
    ac_base_platform="i386-pc-gnu-linux.h"
  ;;
  mips-sgi-irix6.5)
    dnl minor architecture?
    ac_base_platform="mips-sgi-irix65.h"
  ;;
  sparc-sun-solaris*)
    dnl minor architecture?
    ac_base_platform="sparc-sun-solaris.h"
  ;;
  *)
    AC_MSG_ERROR(This target platform is not directly supported by the framework. Please refer to the section describing how to manually configure the framework.)
  ;;
  esac
;;
win32)
  case "$host" in
  i[[3456]]86-pc-cygwin)
    ac_base_platform="i386-pc-winnt.h"
  ;;
  *)
    AC_MSG_ERROR(This target platform is not directly supported by the framework. Please refer to the section describing how to manual configure the framework.)
  ;;
  esac
;;
*)
  AC_MSG_ERROR(The specified flavour is not supported.)
;;
esac

rm -f base/platforms/platform.h
$LN_S $ac_base_platform base/platforms/platform.h



dnl Checks for programs.
AC_PREREQ(2.13)
dnl AC_PROG_CC
dnl AC_PROG_CXX
AC_CHECK_PROG(CC, cc gcc, gcc)
AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, gcc)



dnl Manual configuration

base_explicit_debug=no
AC_ARG_ENABLE(
  debug,[
  --enable-debug=[yes|no]
      This feature enables additional runtime checks. The feature is
      disabled by default.],
  if test "$enableval" = no; then
    base_explicit_debug=no
  elif test "$enableval" = yes; then
    base_explicit_debug=yes
  else
    AC_MSG_ERROR(The debug flag must be either 'yes' or 'no'.)
  fi
)
if test "$base_explicit_debug" = yes; then
  AC_BASE_DEFINE(DEBUG)
fi

base_explicit_trace=no
AC_ARG_ENABLE(
  trace,[
  --enable-trace=[yes|no]
      Specifies that selected functions should dump tracing information to
      standard error. This feature is disabled by default.],
  if test "$enableval" = no; then
    base_explicit_trace=no
  elif test "$enableval" = yes; then
    base_explicit_trace=yes
  else
    AC_MSG_ERROR(The trace flag must be either 'yes' or 'no'.)
  fi
)
if test "$base_explicit_trace" = yes; then
  AC_BASE_DEFINE(TRACE)
fi

base_explicit_namespace=yes
AC_ARG_ENABLE(
  namespace,[
  --enable-namespace=[yes|no]
      Specifies that the symbols of this framework should by placed in the
      namespace 'base'. Disabling this feature will put the symbols into the
      global namespace. This feature is enabled by default.],
  if test "$enableval" = no; then
    base_explicit_namespace=no
  elif test "$enableval" = yes; then
    base_explicit_namespace=yes
  else
    AC_MSG_ERROR(The namespace flag must be either 'yes' or 'no'.)
  fi
)
if test "$base_explicit_namespace" = yes; then
  AC_BASE_DEFINE(NAMESPACE)
fi

base_explicit_demangle=no
AC_ARG_ENABLE(
  demangle,[
  --enable-demangle=[gccv3|gccv2|sunwspro|mipspro|no]
      Specifies that support for type name demangling should be included for
      the given compiler/ABI. This feature is disabled by default. 'gccv3'
      enables support for GCC 3.0. 'gccv2' enables support for GCC 2.95.3.
      'sunwspro' enables support for the SUN WorkShop C++ compiler. 'mipspro'
      enables support for SGI MIPSpro.],
  if test $enableval = gccv3; then
    base_explicit_demangle=gccv3
  elif test $enableval = gccv2; then
    base_explicit_demangle=gccv2
  elif test $enableval = sunwspro; then
    base_explicit_demangle=sunwspro
  elif test $enableval = miprspro; then
    base_explicit_demangle=mipspro
  elif test $enableval = no; then
    base_explicit_demangle=no
  else
    AC_MSG_ERROR(Invalid argument used with the demangle flag.)
  fi
)

base_explicit_inet_ipv6=auto
AC_ARG_ENABLE(
  ipv6,[
  --enable-ipv6=[auto|yes|no]
      Specifies whether the framework should use the interface extensions for
      IP version 6 or not. If the protocol version is not specified then IPv6
      will be used if available. Automatic detection will fail if using a
      cross compiler.],
  if test $enableval = auto; then
    base_explicit_inet_ipv6=auto
  elif test $enableval = no; then
    base_explicit_inet_ipv6=no
  elif test $enableval = yes; then
    base_explicit_inet_ipv6=yes
  else
    AC_MSG_ERROR(IP version must be either 'auto', 'yes', or 'no'.)
  fi
)

base_explicit_big_endian=auto
AC_ARG_ENABLE(
  big-endian,[
  --enable-big-endian=[auto|yes|no]
      Specifies that byte order of the target architecture is big endian. The
      byte order will be detected by default. The byte order detection will
      fail if the compiler is a cross compiler.],
  if test $enableval = auto; then
    base_explicit_big_endian=auto
  elif test $enableval = yes; then
    base_explicit_big_endian=yes
  elif test $enableval = no; then
    base_explicit_big_endian=no
  else
    AC_MSG_ERROR(The byte order must be either 'auto', 'yes', or 'no'.)
  fi
)

base_explicit_large_file_system=auto
AC_ARG_ENABLE(
  large-file-system,[
  --enable-large-file-system=[auto|yes|no]
      Specifies that the Large File System should be utilized. This feature is
      auto-detected by default. The auto-detection will fail if the compiler
      is a cross compiler.],
  if test $enableval = auto; then
    base_explicit_large_file_system=auto
  elif test "$enableval" = no; then
    base_explicit_large_file_system=no
  elif test "$enableval" = yes; then
    base_explicit_large_file_system=yes
  else
    AC_MSG_ERROR(The Large File System flag must be either 'auto', 'yes', or 'no'.)
  fi
)

base_explicit_regexp=no
AC_ARG_ENABLE(
  regexp,[
  --enable-regexp=[pcre|posix|no]
      Specifies that regular expression support should be included. 'pcre'
      selects Perl-Compatible Regular Expression library. 'posix' selects POSIX
      compatible regular expression support provided by the C library. The
      default is no.],
  if test $enableval = pcre; then
    base_explicit_regexp=pcre
  elif test $enableval = posix; then
    base_explicit_regexp=posix
  elif test $enableval = no; then
    base_explicit_regexp=no
  else
    AC_MSG_ERROR(Invalid argument used with the regexp flag.)
  fi
)

base_explicit_xml=no
AC_ARG_ENABLE(
  xml,[
  --enable-xml=[gnomexml|no]
      Specifies that XML support should be included. 'gnomexml' selects the
      Gnome XML Library. The default is no.],
  if test $enableval = gnomexml; then
    base_explicit_xml=gnomexml
  elif test $enableval = no; then
    base_explicit_xml=no
  else
    AC_MSG_ERROR(Invalid argument used with the xml flag.)
  fi
)

AC_ARG_ENABLE(
  ,[
  Please report any errors to <fonseca@mip.sdu.dk>.]
)



dnl Setup variables



dnl Checks for libraries.


dnl AC_BASE_MKYESNO(variable)
AC_DEFUN(AC_BASE_MKYESNO, [dnl
if test $ac_base_status = 0; then $1=yes; else $1=no; fi dnl
])

dnl AC_BASE_YES(variable, yes action)
AC_DEFUN(AC_BASE_YES, [dnl
if test "[$]$1" = yes; then
  $2
fi
])

dnl AC_BASE_NO(variable, no action)
AC_DEFUN(AC_BASE_NO, [dnl
if test "[$]$1" = no; then
  $2
fi
])

dnl AC_BASE_YESNO(variable, yes action, no action)
AC_DEFUN(AC_BASE_YESNO, [dnl
if test "[$]$1" = yes; then
  $2
else
  $3
fi
])

dnl AC_BASE_NOT(dest variable, source variable)
AC_DEFUN(AC_BASE_NOT, [dnl
if test "[$]$2" = no; then $1=yes; else $1=no; fi dnl
])

dnl AC_BASE_CHECK(check message, action, result variable[, extra variable])
AC_DEFUN(AC_BASE_CHECK, [dnl
AC_MSG_CHECKING($1)
$2
ifelse([$4], , AC_MSG_RESULT([$]$3), [dnl
dnl if test "[$]$3" = yes; then
  if test -n "[$]$4"; then
    AC_MSG_RESULT([[$]$3 ([$]$4)])
  else
    AC_MSG_RESULT([$]$3)
  fi
])dnl
])

dnl AC_BASE_CACHE(variable list, action that sets all the specified variables)
AC_DEFUN(AC_BASE_CACHE, [dnl
ac_temp_cached=yes
for ac_temp_var in $1; do
  if eval "test \"`echo '$''{'$ac_temp_var'+set}'`\" != set"; then
    ac_temp_cached=no
    break
  fi
done
if test "$ac_temp_cached" = yes; then
  [echo $ECHO_N "(cached) $ECHO_C" >&AS_MESSAGE_FD]
else
  $2
fi
])

dnl AC_BASE_ATTEMPT(result variable, value variable, value list, action setting result)
AC_DEFUN(AC_BASE_ATTEMPT, [dnl
for $2 in $3; do
  $4
  test "[$]$1" = yes && break
done
test "[$]$1" != yes && $2=
])



base_src_temp="config/temp"
base_obj_temp="config/temp.o"
base_app_temp="config/temp${ac_exeext}"
base_cleanup="rm -f config/temp*"
base_run="./$base_app_temp"

dnl C specific
base_c_ext=c
base_c_preprocess='$CPP $CPPFLAGS'
base_c_compile='${CC} -o $base_obj_temp -c $CFLAGS $CPPFLAGS $base_c_src $base_c_opts'
base_c_link='${CC} -o $base_app_temp $CFLAGS $CPPFLAGS $LDFLAGS $base_c_src $LIBS $base_c_opts'

dnl C++ specific
base_cxx_ext=cpp
base_cxx_preprocess='${CXXCPP} $CPPFLAGS'
base_cxx_compile='${CXX} -o $base_obj_temp -c $CXXFLAGS $CPPFLAGS $base_cxx_src $base_cxx_opts'
base_cxx_link='${CXX} -o $base_app_temp $CXXFLAGS $CPPFLAGS $LDFLAGS $base_cxx_src $LIBS $base_cxx_opts'

dnl AC_BASE_TRY_EXEC(variable)
AC_DEFUN(AC_BASE_TRY_EXEC, [ { (eval [$]$1) 1>&AC_FD_CC 2>&AC_FD_CC; ac_base_status=$?; } ])

dnl AC_BASE_TRY_CMD(command)
AC_DEFUN(AC_BASE_TRY_CMD, [ { ac_temp='$1'; AC_BASE_TRY_EXEC(ac_temp); } ])

dnl AC_BASE_TRY_EXECOUTPUT(variable)
AC_DEFUN(AC_BASE_TRY_EXECOUTPUT, [ { (eval [$]$1) >temp.out 2>&AC_FD_CC; ac_base_status=$?; } ])

dnl AC_BASE_TRY_C_COMPILE(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_C_COMPILE, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_c_src=[$2]
base_c_opts=[$3]
AC_BASE_TRY_EXEC(base_c_compile)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_COMPILE(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_CXX_COMPILE, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_cxx_src=[$2]
base_cxx_opts=[$3]
AC_BASE_TRY_EXEC(base_cxx_compile)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_C_LINK(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_C_LINK, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_c_src=[$2]
base_c_opts=[$3]
AC_BASE_TRY_EXEC(base_c_link)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_LINK(result variable, source file, additional options)
AC_DEFUN(AC_BASE_TRY_CXX_LINK, [dnl
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_cxx_src=[$2]
base_cxx_opts=[$3]
AC_BASE_TRY_EXEC(base_cxx_link)
AC_BASE_MKYESNO([$1])
${base_cleanup}
])

dnl AC_BASE_TRY_C_RUN(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_C_RUN, [dnl
[$1]=no
AC_BASE_YES(
  base_cv_c_cross,
  ifelse([$4], , AC_MSG_ERROR(C compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_c_src=[$2]
base_c_opts=[$3]
if AC_BASE_TRY_EXEC(base_c_link); then
  AC_BASE_TRY_EXEC(base_run)
  AC_BASE_MKYESNO([$1])
fi
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_RUN(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_CXX_RUN, [dnl
[$1]=no
AC_BASE_YES(
  base_cv_cxx_cross,
  ifelse([$4], , AC_MSG_ERROR(C++ compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_cxx_src=[$2]
base_cxx_opts=[$3]
if AC_BASE_TRY_EXEC(base_cxx_link); then
  AC_BASE_TRY_EXEC(base_run)
  AC_BASE_MKYESNO([$1])
fi
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_RUNSTATUS(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_CXX_RUNSTATUS, [dnl
[$1]=
AC_BASE_YES(
  base_cv_cxx_cross,
  ifelse([$4], , AC_MSG_ERROR(C++ compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_cxx_src=[$2]
base_cxx_opts=[$3]
if AC_BASE_TRY_EXEC(base_cxx_link); then
  AC_BASE_TRY_EXEC(base_run)
  [$1]=$ac_base_status
else
  AC_MSG_ERROR(Unable to compile and link program.)
fi
${base_cleanup}
])

dnl AC_BASE_TRY_CXX_RUNOUTPUT(result var, src file, add options[, cross compiler action])
define(AC_BASE_TRY_CXX_RUNOUTPUT, [dnl
[$1]=
AC_BASE_YES(
  base_cv_cxx_cross,
  ifelse([$4], , AC_MSG_ERROR(C++ compiler is a cross compiler), [$4])dnl
)
if test ! -r [$2]; then
  AC_MSG_ERROR(The source file cannot be read.)
fi
${base_cleanup}
base_cxx_src=[$2]
base_cxx_opts=[$3]
if AC_BASE_TRY_EXEC(base_cxx_link); then
  AC_BASE_TRY_EXECOUTPUT(base_run)
  [$1]=$ac_base_status
fi
${base_cleanup}
])

dnl AC_BASE_ADDLIB(library list)
AC_DEFUN(AC_BASE_ADDLIB, [dnl
for ac_temp in [$1]; do
  LIBS="${LIBS}${LIBS:+ }${ac_temp}"
done
])


dnl AC_BASE_CHECK_CFUNCTION(name)
AC_DEFUN(AC_BASE_CHECK_CFUNCTION, [dnl
AC_BASE_CHECK(
  whether $1 is available,
  AC_BASE_CACHE(
    base_cv_function_$1,
    AC_BASE_TRY_C_LINK(base_cv_function_$1, config/$1.c)
  ),
  base_cv_function_$1)
if test "$base_cv_function_$1" = yes; then
  AC_BASE_DEFINE_FUNCTION($1)
fi
])



AC_BASE_CHECK(
  whether C compiler ($CC $CFLAGS $CPPFLAGS $LIBS) works,
  AC_BASE_TRY_C_LINK(base_c_compiler_works, config/cross.c),
  base_c_compiler_works)

AC_BASE_CHECK(
  whether C compiler ($CC $CFLAGS $CPPFLAGS $LIBS) is a cross compiler,
  AC_BASE_TRY_C_RUN(base_c_not_cross, config/cross.c,)
  AC_BASE_NOT(base_cv_c_cross, base_c_not_cross),
  base_cv_c_cross)

AC_BASE_CHECK(
  whether C++ compiler ($CXX $CXXFLAGS $CPPFLAGS $LIBS) works,
  AC_BASE_TRY_CXX_LINK(base_cxx_compiler_works, config/cross++.cpp),
  base_cxx_compiler_works)

AC_BASE_CHECK(
  whether C++ compiler ($CXX $CXXFLAGS $CPPFLAGS $LIBS) is a cross compiler,
  AC_BASE_CACHE(
    base_cv_cxx_cross base_cv_cxx_libs,
    AC_BASE_ATTEMPT(
      base_cxx_not_cross,
      base_cv_cxx_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_RUN(base_cxx_not_cross, config/cross++.cpp, $base_cv_cxx_libs,)
    )dnl
    AC_BASE_NOT(base_cv_cxx_cross, base_cxx_not_cross)dnl
  ),
  base_cv_cxx_cross,
  base_cv_cxx_libs)
AC_BASE_ADDLIB($base_cv_cxx_libs)

AC_BASE_CHECK(
  whether Standard Template Library is working,
  AC_BASE_CACHE(
    base_cv_stl_available base_cv_stl_libs,
    AC_BASE_ATTEMPT(
      base_cv_stl_available,
      base_cv_stl_libs,
      "" "-lpthread",
      AC_BASE_TRY_CXX_RUN(base_cv_stl_available, config/stdc++.cpp, $base_cv_stl_libs)dnl
    )dnl
  ),
  base_cv_stl_available,
  base_cv_stl_libs)
AC_BASE_ADDLIB($base_cv_stl_libs)



dnl Explicit features.

if test "$base_explicit_demangle" = gccv3; then
  AC_BASE_DEFINE(DEMANGLE_GCCV3)
  AC_BASE_ADDLIB(-liberty -ldl)
elif test "$base_explicit_demangle" = gccv2; then
  AC_BASE_DEFINE(DEMANGLE_GCCV2)
  AC_BASE_ADDLIB(-liberty -ldl)
elif test "$base_explicit_demangle" = sunwspro; then
  AC_BASE_DEFINE(DEMANGLE_SUNWSPRO)
  AC_BASE_ADDLIB(-ldemangle)
elif test "$base_explicit_demangle" = mipspro; then
  AC_BASE_DEFINE(DEMANGLE_MIPSPRO)
  AC_BASE_ADDLIB(-lmangle)
fi

if test "$base_explicit_regexp" = posix; then
  AC_BASE_DEFINE(REGEXP_POSIX)
elif test "$base_explicit_regexp" = pcre; then
  AC_BASE_DEFINE(REGEXP_PCRE)
  AC_BASE_ADDLIB(-lpcre)
fi

if test "$base_explicit_xml" = gnomexml; then
  AC_BASE_DEFINE(XML_XMLSOFT_ORG)
  AC_BASE_ADDLIB(-lxml -lz)
fi



dnl Checks for header files.



dnl Check primitives.

AC_BASE_CHECK(
  whether char is unsigned,
  AC_BASE_CACHE(
    base_cv_unsigned_char,
    AC_BASE_TRY_CXX_RUN(base_cv_unsigned_char, config/unsigned_char.cpp, )
  ),
  base_cv_unsigned_char)
AC_BASE_YES(base_cv_unsigned_char, AC_BASE_DEFINE(UNSIGNED_CHAR))

AC_BASE_CHECK(
  size of char,
  AC_BASE_CACHE(
    base_cv_char_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_char_size, config/char_size.cpp, )
  ),
  base_cv_char_size)
AC_BASE_DEFINE(CHAR_SIZE, $base_cv_char_size)

AC_BASE_CHECK(
  size of short,
  AC_BASE_CACHE(
    base_cv_short_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_short_size, config/short_size.cpp, )
  ),
  base_cv_short_size)
AC_BASE_DEFINE(SHORT_SIZE, $base_cv_short_size)

AC_BASE_CHECK(
  size of int,
  AC_BASE_CACHE(
    base_cv_int_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_int_size, config/int_size.cpp, )
  ),
  base_cv_int_size)
AC_BASE_DEFINE(INT_SIZE, $base_cv_int_size)

AC_BASE_CHECK(
  size of long,
  AC_BASE_CACHE(
    base_cv_long_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_long_size, config/long_size.cpp, )
  ),
  base_cv_long_size)
AC_BASE_DEFINE(LONG_SIZE, $base_cv_long_size)

AC_BASE_CHECK(
  size of long long,
  AC_BASE_CACHE(
    base_cv_long_long_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_long_long_size, config/long_long_size.cpp, )
  ),
  base_cv_long_long_size)
AC_BASE_DEFINE(LONG_LONG_SIZE, $base_cv_long_long_size)

AC_BASE_CHECK(
  size of pointer,
  AC_BASE_CACHE(
    base_cv_pointer_size,
    AC_BASE_TRY_CXX_RUNSTATUS(base_cv_pointer_size, config/pointer_size.cpp, )
  ),
  base_cv_pointer_size)
AC_BASE_DEFINE(POINTER_SIZE, $base_cv_pointer_size)



if test $base_explicit_big_endian = auto; then
  AC_BASE_CHECK(
    whether byte order of architecture is big endian,
    AC_BASE_CACHE(
      base_cv_big_endian,
      AC_BASE_TRY_CXX_RUN(base_cv_big_endian, config/byteorder.c, , AC_MSG_ERROR(Autodetection of byte order does not work with cross compiler.))
    ),
    base_cv_big_endian)
  base_explicit_big_endian=$base_cv_big_endian
fi
AC_BASE_YESNO(
  base_explicit_big_endian,
  AC_BASE_DEFINE(BYTE_ORDER, _DK_SDU_MIP__BASE__BIG_ENDIAN),
  AC_BASE_DEFINE(BYTE_ORDER, _DK_SDU_MIP__BASE__LITTLE_ENDIAN)
)

AC_BASE_CHECK(
  whether floating-point word order is big endian,
  AC_BASE_CACHE(
    base_cv_float_word_order,
    AC_BASE_TRY_CXX_RUN(base_cv_float_word_order, config/float_word_order.cpp, -I. )
  ),
  base_cv_float_word_order)
AC_BASE_YESNO(
  base_cv_float_word_order,
  AC_BASE_DEFINE(FLOAT_WORD_ORDER, _DK_SDU_MIP__BASE__BIG_ENDIAN),
  AC_BASE_DEFINE(FLOAT_WORD_ORDER, _DK_SDU_MIP__BASE__LITTLE_ENDIAN)
)



AC_DEFUN(AC_BASE_VALUE2FLOAT, [dnl
  if test "[$3]" = 1; then
    [$2]="ieee 754 single"
    [$1]="_DK_SDU_MIP__BASE__IEEE_754_SINGLE_PRECISION"
  elif test "[$3]" = 2; then
    [$2]="ieee 754 double"
    [$1]="_DK_SDU_MIP__BASE__IEEE_754_DOUBLE_PRECISION"
  elif test "[$3]" = 3; then
    [$2]="ieee extended 96"
    [$1]="_DK_SDU_MIP__BASE__IEEE_EXTENDED_DOUBLE_PRECISION_96"
  elif test "[$3]" = 4; then
    [$2]="ieee extended 128"
    [$1]="_DK_SDU_MIP__BASE__IEEE_EXTENDED_DOUBLE_PRECISION_128"
  elif test "[$3]" = 5; then
    [$2]="ieee quadruple"
    [$1]="_DK_SDU_MIP__BASE__IEEE_QUARUPLE_PRECISION"
  else
    [$2]="unspecified"
    [$1]="_DK_SDU_MIP__BASE__UNSPECIFIED"
  fi
])

AC_BASE_CHECK(
  representation of float,
  AC_BASE_CACHE(
    base_cv_float base_cv_floatstr,
    AC_BASE_TRY_CXX_RUNSTATUS(ac_base_temp, config/float.cpp, -I. )
    AC_BASE_VALUE2FLOAT(base_cv_float, base_cv_floatstr, $ac_base_temp)
  ),
  base_cv_floatstr)
AC_BASE_DEFINE(FLOAT, $base_cv_float)

AC_BASE_CHECK(
  representation of double,
  AC_BASE_CACHE(
    base_cv_double base_cv_doublestr,
    AC_BASE_TRY_CXX_RUNSTATUS(ac_base_temp, config/double.cpp, -I. )
    AC_BASE_VALUE2FLOAT(base_cv_double, base_cv_doublestr, $ac_base_temp)
  ),
  base_cv_doublestr)
AC_BASE_DEFINE(DOUBLE, $base_cv_double)

AC_BASE_CHECK(
  representation of long double,
  AC_BASE_CACHE(
    base_cv_long_double base_cv_long_doublestr,
    AC_BASE_TRY_CXX_RUNSTATUS(ac_base_temp, config/long_double.cpp, -I. )
    AC_BASE_VALUE2FLOAT(base_cv_long_double, base_cv_long_doublestr, $ac_base_temp)
  ),
  base_cv_long_doublestr)
AC_BASE_DEFINE(LONG_DOUBLE, $base_cv_long_double)



dnl Check for language features.

AC_BASE_CHECK(
  whether const is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_const,
    AC_BASE_TRY_CXX_COMPILE(base_cv_const, config/const.cpp, )
  ),
  base_cv_const)
if test "$base_cv_const" = yes; then
  AC_BASE_DEFINE(CPP_CONST)
fi

AC_BASE_CHECK(
  whether inline is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_inline,
    AC_BASE_TRY_CXX_COMPILE(base_cv_inline, config/inline.cpp, )
  ),
  base_cv_inline)
if test "$base_cv_inline" = yes; then
  AC_BASE_DEFINE(CPP_INLINE)
fi

AC_BASE_CHECK(
  whether static const with init is supported inside class def,
  AC_BASE_CACHE(
    base_cv_static_const,
    AC_BASE_TRY_CXX_COMPILE(base_cv_static_const, config/static_const.cpp, )
  ),
  base_cv_static_const)
if test "$base_cv_static_const" = yes; then
  AC_BASE_DEFINE(CPP_STATIC_CONST)
fi

AC_BASE_CHECK(
  whether anonymous struct is supported by the compiler,
  AC_BASE_CACHE(
    base_cv_anonymous_struct,
    AC_BASE_TRY_CXX_COMPILE(base_cv_anonymous_struct, config/anonymous_struct.cpp, )
  ),
  base_cv_anonymous_struct)
if test "$base_cv_anonymous_struct" = yes; then
  AC_BASE_DEFINE(CPP_ANONYMOUS)
fi



dnl Checks for typedefs, structures, and compiler characteristics.

AC_BASE_CHECK(
  whether the type socklen_t is available,
  AC_BASE_CACHE(
    base_cv_type_socklen_t,
    AC_BASE_TRY_CXX_LINK(base_cv_type_socklen_t, config/socklen_t.c)
  ),
  base_cv_type_socklen_t)
if test "$base_cv_type_socklen_t" = yes; then
  AC_BASE_DEFINE(SOCKLEN_T)
fi



dnl Checks for library functions.

if test $base_explicit_inet_ipv6 = auto; then
  AC_BASE_CHECK(
    whether IPv6 is supported by the operating system,
    AC_BASE_CACHE(
      base_cv_inet_ipv6 base_cv_inet_ipv6_libs,
      AC_BASE_ATTEMPT(
        base_cv_inet_ipv6,
        base_cv_inet_ipv6_libs,
        "" -lsocket "-lsocket -lnsl",
        AC_BASE_TRY_CXX_RUN(base_cv_inet_ipv6, config/ipv6.c, $base_cv_inet_ipv6_libs, AC_MSG_ERROR(Autodetection of IPv6 support does not work with cross compiler.))dnl
      )dnl
    ),
    base_cv_inet_ipv6,
    base_cv_inet_ipv6_libs)
  base_explicit_inet_ipv6=$base_cv_inet_ipv6
fi
AC_BASE_YES(
  base_explicit_inet_ipv6,
  AC_BASE_DEFINE(INET_IPV6)
  AC_BASE_ADDLIB($base_cv_inet_ipv6_libs)
)



if test $base_explicit_large_file_system = auto; then
  AC_BASE_CHECK(
    whether Large File System is supported by the operating system,
    AC_BASE_CACHE(
      base_cv_large_file_system,
      AC_BASE_TRY_CXX_LINK(base_cv_large_file_system, config/largefile.c, , AC_MSG_ERROR(Autodetection of Large File System does not work with cross compiler.))
    ),
    base_cv_large_file_system)
  base_explicit_large_file_system=$base_cv_large_file_system
fi
AC_BASE_YES(
  base_explicit_large_file_system,
  AC_BASE_DEFINE(LARGE_FILE_SYSTEM)
)



dnl Check POSIX thread support
if test "$ac_base_thread" = posix; then

AC_BASE_CHECK(
  whether Posix thread is supported,
  AC_BASE_CACHE(
    base_cv_pthread base_cv_pthread_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread,
      base_cv_pthread_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_RUN(base_cv_pthread, config/pthread.c, $base_cv_pthread_libs, AC_MSG_ERROR(Autodetection of POSIX thread support does not work with cross compiler.))dnl
    )dnl
  ),
  base_cv_pthread,
  base_cv_pthread_libs)
if test "$base_cv_pthread" != yes; then
  AC_MSG_ERROR(The compiler does not support POSIX threads)
fi
AC_BASE_ADDLIB($base_cv_pthread_libs)

AC_BASE_CHECK(
  whether pthread_yield is provided by the POSIX thread library,
  AC_BASE_CACHE(
    base_cv_pthread_yield base_cv_pthread_yield_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_yield,
      base_cv_pthread_yield_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_yield, config/pthread_yield.c, $base_cv_pthread_yield_libs)dnl
    )dnl
  ),
  base_cv_pthread_yield,
  base_cv_pthread_yield_libs)
if test "$base_cv_pthread_yield" = yes; then
  AC_BASE_DEFINE(PTHREAD_YIELD)
  AC_BASE_ADDLIB($base_cv_pthread_yield_libs)
fi

AC_BASE_CHECK(
  whether Posix semaphore is supported,
  AC_BASE_CACHE(
    base_cv_pthread_semaphore base_cv_pthread_semaphore_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_semaphore,
      base_cv_pthread_semaphore_libs,
      "" -lpthread -lrt,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_semaphore, config/pthread_semaphore.c, $base_cv_pthread_semaphore_libs)dnl
    )dnl
  ),
  base_cv_pthread_semaphore,
  base_cv_pthread_semaphore_libs)
if test "$base_cv_pthread_semaphore" = yes; then
  AC_BASE_DEFINE(PTHREAD_SEMAPHORE)
  AC_BASE_ADDLIB($base_cv_pthread_semaphore_libs)
fi

AC_BASE_CHECK(
  whether Posix read-write lock is supported,
  AC_BASE_CACHE(
    base_cv_pthread_rwlock base_cv_pthread_rwlock_libs,
    AC_BASE_ATTEMPT(
      base_cv_pthread_rwlock,
      base_cv_pthread_rwlock_libs,
      "" -lpthread,
      AC_BASE_TRY_CXX_LINK(base_cv_pthread_rwlock, config/pthread_rwlock.c, $base_cv_pthread_rwlock_libs)dnl
    )dnl
  ),
  base_cv_pthread_rwlock,
  base_cv_pthread_rwlock_libs)
if test "$base_cv_pthread_rwlock" = yes; then
  AC_BASE_DEFINE(PTHREAD_RWLOCK)
  AC_BASE_ADDLIB($base_cv_pthread_rwlock_libs)
fi

fi dnl POSIX thread support



AC_BASE_CHECK_CFUNCTION(memchr)
AC_BASE_CHECK_CFUNCTION(memcmp)
AC_BASE_CHECK_CFUNCTION(memcpy)
AC_BASE_CHECK_CFUNCTION(memmove)
AC_BASE_CHECK_CFUNCTION(memset)
AC_BASE_CHECK_CFUNCTION(mbrtowc)
AC_BASE_CHECK_CFUNCTION(mbsrtowcs)



CPPFLAGS='-I${top_srcdir}'"${CPPFLAGS:+ }${CPPFLAGS}"
AC_SUBST(CXXFLAGS)



ac_base_header=base/configuration.h
echo updating configuration...
mv $ac_base_config $ac_base_header



AC_OUTPUT(Makefile base/Makefile base/docs/Makefile base/docs/en/Makefile base/Makefile base/concurrency/Makefile base/mathematics/Makefile base/io/Makefile base/string/Makefile base/mem/Makefile base/net/Makefile base/collection/Makefile base/filesystem/Makefile base/iterator/Makefile base/dl/Makefile base/xml/Makefile base/security/Makefile)
