dnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)

AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(ellert,0.55)

AC_DEFINE(_REENTRANT)
AC_DEFINE(_GNU_SOURCE)



dnl Checks for programs.
AC_PREREQ(2.13)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB



dnl Manual configuration

base_use_namespaces=yes
AC_ARG_ENABLE(
  namespaces,
  [  --enable-namespaces     Specifies that the symbols of this framework should
                          by placed in the namespace 'base'. Disabling this
                          feature will put the symbols into the global
                          namespace. This feature is enabled by default.],
  if test $enableval != yes; then
    base_use_namespaces=no
  fi
)
if test $base_use_namespaces = yes; then
  AC_DEFINE(BASE_USE_NAMESPACE, 1, Specifies that the symbols of this framework should be placed in the namespace 'base')
fi



dnl Checks for libraries.

LIBS="$LIBS -lpthread"



dnl Checks for header files.

CPPFLAGS="$CPPFLAGS -I`pwd`/ellert"



dnl Checks for typedefs, structures, and compiler characteristics.

AC_CACHE_CHECK(
  whether byte order of architecture is big endian,
  base_cv_byte_order_is_big_endian,
  AC_TRY_RUN(
    changequote(<<, >>)dnl
    <<int main() {union {char c[[sizeof(int)]]; int i;} u; u.i = 1; return u.c[[0]];}>>,
    changequote([, ])dnl
    base_cv_byte_order_is_big_endian=yes,
    base_cv_byte_order_is_big_endian=no,
    base_cv_byte_order_is_big_endian=no
  )
)
if test $base_cv_byte_order_is_big_endian = yes; then
  AC_DEFINE(HAVE_BIG_ENDIAN, 1, Specifies that the byte order of the architecture is big endian)
fi



AC_CACHE_CHECK(
  whether IPv6 is supported by the operating system,
  base_cv_inet_ipv6,
  AC_TRY_COMPILE([#include <netinet/in.h>], [struct in6_addr ia; struct sockaddr_in6 sa;], base_cv_inet_ipv6=yes, base_cv_inet_ipv6=no)
)
if test $base_cv_inet_ipv6 = yes; then
  AC_DEFINE(HAVE_INET_IPV6, 1, Specifies that the interface extensions for IP version 6 are present)
fi



dnl Checks for library functions.

AC_CACHE_CHECK(
  whether pthread_yield is provided by the POSIX threads library,
  base_cv_pthread_yield,
  AC_TRY_COMPILE([],
  [
    #define _GNU_SOURCE
    #include <pthread.h>
    int main() {
      pthread_yield();
      return 0;
    }
  ], base_cv_pthread_yield=yes, base_cv_pthread_yield=no)
)
if test $base_cv_pthread_yield = yes; then
  AC_DEFINE(HAVE_PTHREAD_YIELD, 1, Specifies that pthread_yield is provided by the POSIX threads library)
fi

AC_CHECK_FUNCS(memchr memcmp memmove)



AC_OUTPUT(Makefile ellert/Makefile ellert/docs/Makefile ellert/docs/en/Makefile ellert/base/Makefile ellert/vehicle/Makefile ellert/base/concurrency/Makefile ellert/base/mathematics/Makefile ellert/io/Makefile ellert/base/io/Makefile ellert/base/string/Makefile ellert/base/mem/Makefile ellert/base/net/Makefile ellert/control/Makefile ellert/base/collection/Makefile )
